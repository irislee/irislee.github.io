<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Iris Lee]]></title>
  <link href="http://irislee.github.io/atom.xml" rel="self"/>
  <link href="http://irislee.github.io/"/>
  <updated>2014-02-08T18:14:32-08:00</updated>
  <id>http://irislee.github.io/</id>
  <author>
    <name><![CDATA[Iris Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[8 Steps to Create a Simple Capybara Test]]></title>
    <link href="http://irislee.github.io/blog/2013/11/01/8-steps-to-create-a-simple-capybara-test/"/>
    <updated>2013-11-01T17:32:00-07:00</updated>
    <id>http://irislee.github.io/blog/2013/11/01/8-steps-to-create-a-simple-capybara-test</id>
    <content type="html"><![CDATA[<p>What&rsquo;s Capybara?</p>

<p><img src="http://i.imgur.com/q4ZZRfa.jpg"></p>

<p>Capybara is basically a library that helps you test web applications by simulating how a real user would interact with your app.</p>

<p><a href="https://github.com/jnicklas/capybara">Capybara</a> requires Ruby 1.9.3 or later. To install, type in your terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install capybara</span></code></pre></td></tr></table></div></figure>


<p>Capybara tests are often called feature tests or end-to-end testing. It was built on top of Nokogiri in order to discover the elements on a page using HTML and CSS. It is a DSL (Domain Specific Language) that is built on top of <a href="https://github.com/rspec/rspec"RSpec</a> and <a href="http://cukes.info/">Cucumber</a>.</p>

<p>Capybara tests are like RSpec tests with Capybara flavoring (yum giant rodent). Some keywords:</p>

<table border="1">
  <tr>
    <th>Capybara DSL</th>
    <th>RSpec DSL</th>
  </tr>
  <tr>
    <td>feature</td>
    <td>describe</td>
  </tr>
  <tr>
    <td>background </td>
    <td>before</td>
  </tr>
  <tr>
    <td>scenario</td>
    <td>it</td>
  </tr>
  <tr>
    <td>given</td>
    <td>let</td>
  </tr>
</table>


<p>Capybara uses a web driver (in this example Selenium) to do some browser magic. It lets you control the browser through code and has the browser take actions on your behalf in order to make sure the website actually works as the user will experience. Normally a “headless browser” is used to save memory, but the example below will show it to you live…for funsies.</p>

<p>Examples of Capybara syntax:</p>

<table border="1">
  <tr>
    <th>Method</th>
    <th>What it does</th>
  </tr>
  <tr>
    <td>visit &#8216;url&#8217;</td>
    <td>goes to the given url</td>
  </tr>
  <tr>
    <td>fill_in(locator, :with => option)</td>
    <td>finds text field by id and fills in with option</td>
  </tr>
  <tr>
    <td>click_button(locator)</td>
    <td>finds button by id and clicks it</td>
  </tr>
</table>




<h2>Capybara with Google and Youtube Searches.</h2>


<p><em>You can download this code <a href="https://github.com/irislee/try-capybara">here</a>.</em></p>

<h3>Step 1</h3>


<p>In your project folder, add Capybara and Selenium-WebDriver to your Gemfile. It should look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s1">&#39;https://rubygems.org&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;sinatra&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s2">&quot;rspec&quot;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s2">&quot;capybara&quot;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;selenium-webdriver&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<h3>Step 2</h3>


<p>Don&rsquo;t forget to bundle</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Step 3</h3>


<p>Create a simple_app.rb file (it got mad at me if I didn’t include this file).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;./environment&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">get</span> <span class="s1">&#39;/&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="s2">&quot;hello capybara&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<h3>Step 4</h3>


<p><em>Normally, there’d be more folders in your application, but this is a very simple example so everything is in the top level.</em></p>

<p>Your environment.rb should look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;bundler/setup&#39;</span>
</span><span class='line'><span class="no">Bundler</span><span class="o">.</span><span class="n">require</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;./simple_app&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<h3>Step 5</h3>


<p>And your config.ru…</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;./environment&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">run</span> <span class="no">SimpleApp</span>
</span></code></pre></td></tr></table></div></figure>




<h3>Step 6</h3>


<p>Require Capybara in your spec_helper.rb file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;capybara&#39;</span>
</span><span class='line'><span class="kp">include</span> <span class="ss">Capybara</span><span class="p">:</span><span class="ss">:DSL</span>
</span><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">default_driver</span> <span class="o">=</span> <span class="ss">:selenium</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">app</span>
</span><span class='line'>  <span class="ss">Sinatra</span><span class="p">:</span><span class="ss">:Application</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:environment</span><span class="p">,</span> <span class="ss">:test</span>
</span><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">treat_symbols_as_metadata_keys_with_true_values</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">run_all_when_everything_filtered</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">filter_run</span> <span class="ss">:focus</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">order</span> <span class="o">=</span> <span class="s1">&#39;random&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<h3>Step 7</h3>


<p>Here’s what my features_spec.rb looks like. I’m using Capybara to search Google.com for “Flatiron School” and then visiting YouTube to look for cat videos. In each describe block, I tell Capybara to visit the website and fill in the text field with what I’m searching for and then click submit. The <code>sleep 2</code> is there to slow down the process so you can see it better in Step 8.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;../simple_app.rb&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper.rb&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="s1">&#39;google search page&#39;</span><span class="p">,</span> <span class="ss">:js</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should search the google for something&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">visit</span> <span class="s1">&#39;http://google.com&#39;</span>
</span><span class='line'>    <span class="n">fill_in</span><span class="p">(</span><span class="s2">&quot;gbqfq&quot;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s2">&quot;Flatiron School&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">sleep</span> <span class="mi">2</span>
</span><span class='line'>    <span class="n">click_button</span><span class="p">(</span><span class="s2">&quot;gbqfb&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">sleep</span> <span class="mi">2</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="s1">&#39;youtube search page&#39;</span><span class="p">,</span> <span class="ss">:js</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should search youtube for maru&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">visit</span> <span class="s1">&#39;http://www.youtube.com/&#39;</span>
</span><span class='line'>    <span class="n">fill_in</span><span class="p">(</span><span class="s2">&quot;masthead-search-term&quot;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s2">&quot;mugumogu&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">sleep</span> <span class="mi">2</span>
</span><span class='line'>    <span class="n">click_button</span><span class="p">(</span><span class="s2">&quot;search-btn&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">sleep</span> <span class="mi">2</span>
</span><span class='line'>    <span class="n">page</span><span class="o">.</span><span class="n">should</span> <span class="n">have_content</span><span class="p">(</span><span class="s2">&quot;maru&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<h3>Step 8</h3>


<p>Now run <code>rspec</code> in your terminal and watch it do the searches and pass the tests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What's foo bar?]]></title>
    <link href="http://irislee.github.io/blog/2013/10/17/what-is-foobar/"/>
    <updated>2013-10-17T12:12:00-07:00</updated>
    <id>http://irislee.github.io/blog/2013/10/17/what-is-foobar</id>
    <content type="html"><![CDATA[<p>You&rsquo;ve probably seen something like this before:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">foo</span> <span class="o">=</span> <span class="s2">&quot;Chunky&quot;</span>
</span><span class='line'><span class="n">bar</span> <span class="o">=</span> <span class="s2">&quot;Bacon!&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">foo</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="n">bar</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">Chunky</span> <span class="no">Bacon</span><span class="o">!</span>
</span></code></pre></td></tr></table></div></figure>


<p>But what is the origin of using &ldquo;foo,&rdquo; &ldquo;bar,&rdquo; and &ldquo;baz&rdquo; as placeholder names in pseudocode (aka  metasyntactic variables)? According to the interwebs, &ldquo;foo&rdquo; first emerged as a nonsense word in the 1930s in the comic <i>Smokey Stover</i> by Bill Holman and became popular in other cartoons at the time. From there, &ldquo;foo&rdquo; merged with the military acronym <a href="http://en.wikipedia.org/wiki/FUBAR#FUBAR">FUBAR</a>, which arose in the armed forces during WWII. The use of &ldquo;foo&rdquo; in programming, however, is credited to MIT&rsquo;s Tech Model Railroad Club (TMRC) in the 1960s.</p>

<p><img src="../images/downloads/taf.jpg" title="MIT's Tech Model Railroad Club" alt="Thomas and Friends" /></p>

<p>The TMRC is celebrated due to its developmental role in hacker culture.
Foo&rsquo;s first appearance in print was in a 1965 edition of MIT&rsquo;s &ldquo;Tech Engineering News.&rdquo; In TMRC&rsquo;s train model system, there were scram switches located at numerous places around the room that could be thrown if a train was going to crash into something. Another feature of the system was a digital clock on the dispatch board. When someone hit a scram switch, the clock stopped and would instead display the word &ldquo;&#8221;foo&rdquo;,&ldquo; thus why they were called &rdquo;&ldquo;foo&rdquo; switches&#8221;.</p>

<p>The train room also had two buttons by the door labeled &ldquo;foo&rdquo; and &ldquo;bar&rdquo;. They were often re-purposed for whatever fun idea the TMRC had at the time, hence the adoption of &ldquo;foo&rdquo; and &ldquo;bar&rdquo; as general purpose variable names. &ldquo;Baz&rdquo; exists simply because Stanford preferred &ldquo;baz&rdquo; over &ldquo;bar&rdquo;.</p>

<p>The terms were made popular through computer science circles in the 1960s and early 1970s by system manuals from the Digital Equipment Corporation and <a href="http://en.wikipedia.org/wiki/FORTRAN">Fortran&rsquo;s</a> code for <i><a href="http://en.wikipedia.org/wiki/Colossal_Cave_Adventure">Colossal Cave Adventure</a></i>.</p>

<p>Pseudocode in other countries:</p>

<ul>
  <li>UK: wibble, wobble, fred, flob</li>
  <li>France: toto, tata, tutu, bidule, azerty (French keyboard&#8217;s asdf)</li>
  <li>Japan: hoge, piyo, fuga, hogera</li>
  <li>Isarael: chupchick, stam</li>
  <li>Italy: pippo, pluto, paperino</li>
  <li>Spain: fulano, mengano, zutano</li>
</ul>




<h2>TL;DR</h2>


<ul>
  <li>&#8220;foo&#8221; is a nonsense word from 1930s comics.</li>
  <li>FUBAR comes from US military slang during WWII.</li>
  <li>MIT&#8217;s Tech Model Train Club popularized the terms for tinkering/hacking.</li>
  <li>Use &#8220;foo&#8221;, bar, and baz to test out concepts so you don&#8217;t cause a SNAFU and make your code FUBAR.</li>
  <li>What about &#8220;Hello, World&#8221;? It comes from <em><a href = "http://en.wikipedia.org/wiki/The_C_Programming_Language_(book)">The C Programming Language</a></em>.</li>
  <li>What about &#8220;Chunky Bacon&#8221;? It comes from <em><a href = "http://en.wikipedia.org/wiki/Why's_(poignant)_Guide_to_Ruby">why&#8217;s (poignant) Guide to Ruby</a></em>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Tricks and Oddities]]></title>
    <link href="http://irislee.github.io/blog/2013/10/08/ruby-tricks-and-oddities/"/>
    <updated>2013-10-08T06:34:00-07:00</updated>
    <id>http://irislee.github.io/blog/2013/10/08/ruby-tricks-and-oddities</id>
    <content type="html"><![CDATA[<p>Just looked through Julio Santos&#8217; <a href="https://speakerdeck.com/jsantos/ruby-things">&ldquo;Ruby Things&rdquo;</a> on Speaker Deck and learned some quirkly little things about Ruby.</p>

<p>Creating hashes from arrays. 2 different outcomes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Hash</span><span class="o">[[</span><span class="s2">&quot;one&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;two&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="o">]]</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="p">{</span><span class="o">[</span><span class="s2">&quot;one&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="o">]=&gt;[</span><span class="s2">&quot;two&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="o">=[</span><span class="s2">&quot;one&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;two&quot;</span><span class="p">,</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[[</span><span class="s2">&quot;one&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;two&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="o">]]</span>
</span><span class='line'>
</span><span class='line'><span class="no">Hash</span><span class="o">[</span><span class="n">a</span><span class="o">]</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="p">{</span><span class="s2">&quot;one&quot;</span><span class="o">=&gt;</span><span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;two&quot;</span><span class="o">=&gt;</span><span class="mi">2</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <a href="http://ruby-doc.org/core-2.0.0/Array.html#method-i-zip">zip method</a> &ldquo;converts any arguments to arrays, then merges elements of self with corresponding elements from each argument.&rdquo;
For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="o">]</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">9</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="o">].</span><span class="n">zip</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Santos demonstrates that you can use zip to create hashes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">keys</span> <span class="o">=</span> <span class="o">[</span><span class="ss">:one</span><span class="p">,</span> <span class="ss">:two</span><span class="p">,</span> <span class="ss">:three</span><span class="o">]</span>
</span><span class='line'><span class="n">values</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">zip</span> <span class="o">=</span> <span class="n">keys</span><span class="o">.</span><span class="n">zip</span><span class="p">(</span><span class="n">values</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[[</span><span class="ss">:one</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="ss">:two</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="ss">:three</span><span class="p">,</span> <span class="mi">3</span><span class="o">]]</span>
</span><span class='line'><span class="no">Hash</span><span class="o">[</span><span class="n">zip</span><span class="o">]</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:one</span><span class="o">=&gt;</span><span class="mi">1</span><span class="p">,</span> <span class="ss">:two</span><span class="o">=&gt;</span><span class="mi">2</span><span class="p">,</span> <span class="ss">:three</span><span class="o">=&gt;</span><span class="mi">3</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And yesterday while wishing a <code>collect_with_index</code> method existed, my group discovered that you can combine <code>each_with_index</code> with <code>collect</code>!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Array</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">make_list</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">each_with_index</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">german</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>      <span class="s2">&quot;</span><span class="si">#{</span><span class="n">index</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="s2">. </span><span class="si">#{</span><span class="n">german</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;eins&quot;</span><span class="p">,</span> <span class="s2">&quot;zwei&quot;</span><span class="p">,</span> <span class="s2">&quot;drei&quot;</span><span class="o">]</span>
</span><span class='line'><span class="n">array</span><span class="o">.</span><span class="n">make_list</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;1. eins&quot;</span><span class="p">,</span> <span class="s2">&quot;2. zwei&quot;</span><span class="p">,</span> <span class="s2">&quot;3. drei&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
